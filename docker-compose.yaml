services:

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./src/main/resources/nginx/nginx.config:/etc/nginx/nginx.conf
      - ./src/main/resources/nginx/sites-enabled:/etc/nginx/sites-enabled
    network_mode: host
    depends_on:
      api1:
        condition: service_healthy
      api2:
        condition: service_healthy

  api1: &api
    build: .
    hostname: app1
    expose:
      - "8080"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      API_SECURITY_TOKEN_SECRET: ${API_SECURITY_TOKEN_SECRET}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      HTTP_PORT: 8080
    network_mode: host
    restart: on-failure
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api2: &api
    build: .
    hostname: app2
    expose:
      - "8081"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      API_SECURITY_TOKEN_SECRET: ${API_SECURITY_TOKEN_SECRET}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      HTTP_PORT: 8081
    network_mode: host
    restart: on-failure
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

#  api2:
#    <<: *api
#    hostname: app2
#    environment:
#      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
#      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
#      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
#      API_SECURITY_TOKEN_SECRET: ${API_SECURITY_TOKEN_SECRET}
#      REDIS_HOST: ${REDIS_HOST}
#      REDIS_PORT: ${REDIS_PORT:-6379}
#      REDIS_PASSWORD: ${REDIS_PASSWORD}
#      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
#      SERVER_PORT: 8081

  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: host

  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    network_mode: host
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli --no-auth-warning -a $$REDIS_PASSWORD ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}

volumes:
  pgdata:

#networks:
#  backend:
#    driver: bridge