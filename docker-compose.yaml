services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./src/main/resources/nginx/nginx.config:/etc/nginx/nginx.conf
      - ./src/main/resources/nginx/sites-enabled:/etc/nginx/sites-enabled
    networks:
      - backend
  api:
    build: .
    ports:
      - "8080-8081:8080"
    deploy:
      replicas: 2
    depends_on:
      - database
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      API_SECURITY_TOKEN_SECRET: ${API_SECURITY_TOKEN_SECRET}
    networks:
      - backend
    restart:
      on-failure
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

volumes:
  pgdata:
networks:
  backend:
    driver: bridge